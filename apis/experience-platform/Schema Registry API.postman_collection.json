{
	"info": {
		"_postman_id": "29be0860-c37e-447d-b39a-5e289afbee90",
		"name": "Schema Registry API",
		"description": "The Schema Registry API is used to access the Schema Library within Adobe Experience Platform. The registry provides a user interface and RESTful API from which all available library resources are accessible.\n\nRelated documentation:\n  * <a href=\"https://www.adobe.io/apis/experienceplatform/home/xdm/xdmservices.html#!api-specification/markdown/narrative/technical_overview/schema_registry/xdm_system/xdm_system_in_experience_platform.md\">XDM System in Adobe Experience Platform</a>\n  * <a href=\"https://www.adobe.io/apis/experienceplatform/home/xdm/xdmservices.html#!api-specification/markdown/narrative/technical_overview/schema_registry/schema_composition/schema_composition.md\">Basics of schema composition</a>\n  * <a href=\"https://www.adobe.io/apis/experienceplatform/home/xdm/xdmservices.html#!api-specification/markdown/narrative/technical_overview/schema_registry/schema_registry_developer_guide.md\">Schema Registry API developer guide</a>\n  * <a href=\"https://www.adobe.io/apis/experienceplatform/home/xdm/xdmservices.html#!api-specification/markdown/narrative/tutorials/schema_registry_api_tutorial/schema_registry_api_tutorial.md\">Create a schema using the Schema Registry API</a>\n  \nVisualize API calls with Postman (a free, third-party software):\n  * [Schema Registry API Postman collection on GitHub](https://github.com/adobe/experience-platform-postman-samples/blob/master/apis/experience-platform/Schema%20Registry%20API.postman_collection.json)\n  * [Video guide for creating the Postman environment](https://video.tv.adobe.com/v/28832)\n  * [Steps for importing environments and collections in Postman](https://learning.getpostman.com/docs/postman/collection_runs/using_environments_in_collection_runs/)\n\nAPI paths:\n  * PLATFORM Gateway URL: https://<span>platform.adobe.io\n  * Base path for this API: /data/foundation/schemaregistry\n  * Example of a complete path for making a call to \"/stats\": https://<span>platform.adobe.io/data/foundation/schemaregistry/stats\n\nRequired headers:\n  * All service calls require the headers `Authorization`, `x-gw-ims-org-id`, and `x-api-key`. For more information on how to obtain these, see the <a href=\"https://www.adobe.io/apis/experienceplatform/home/tutorials/alltutorials.html#!api-specification/markdown/narrative/tutorials/authenticate_to_acp_tutorial/authenticate_to_acp_tutorial.md\">authentication tutorial</a>.\n  * All resources in Experience Platform are isolated to specific virtual sandboxes. All requests to Platform APIs require the header `x-sandbox-name` whose value is the all-lowercase name of the sandbox the operation will take place in (for example, \"prod\"). See the [sandboxes overview](https://www.adobe.io/apis/experienceplatform/home/permissions-and-sandboxes/permissions-and-sandboxes.html#!api-specification/markdown/narrative/technical_overview/sandboxes/sandboxes-overview.md) for more information.\n  * All GET requests to the Schema Registry require an `Accept` header to determine what data is returned by the system. See the <a href=\"https://www.adobe.io/apis/experienceplatform/home/xdm/xdmservices.html#!api-specification/markdown/narrative/technical_overview/schema_registry/schema_registry_developer_guide.md#accept-header\">section on Accept headers</a> in the Schema Registry developer guide for more information.\n  * All requests with a payload in the request body (such as POST, PUT, and PATCH calls) must include the header `Content-Type` with a value of `application/json`.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Stats",
			"item": [
				{
					"name": "Return {TENANT_ID} and Schema Registry usage information.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Begin Adobe-provided Pre-Request Scripts **/",
									"// Do not send HTTP Headers with empty variables, as Postman will send the literal variable name",
									"pm.request.headers.each(header => {",
									"    if (header.value.startsWith(\"{{\") && header.value.endsWith(\"}}\")) {",
									"        if (!pm.variables.get(header.value.substring(2, header.value.length - 2))) { pm.request.headers.remove(header.key); }",
									"    }",
									"});",
									"",
									"// Do not send HTTP URL Query Parameters with empty variables, as Postman will send the literal variable name",
									"pm.request.url.query.remove(q => { ",
									"    if (q.value.startsWith(\"{{\") && q.value.endsWith(\"}}\")) {",
									"        return !pm.variables.get(q.value.substring(2, q.value.length - 2));",
									"    } ",
									"});",
									"/** End Adobe-provided Pre-Request Scripts **/"
								]
							}
						}
					],
					"_postman_id": "d3e11c51-5d0c-4ef5-a064-ac85b8326fe0",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.adobe.xed+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"description": "The access token provided after authorization in the format \"Bearer {ACCESS_TOKEN}\"",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"description": "Your specific API key for your unique Platform configuration ({API_KEY})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-gw-ims-org-id",
								"value": "{{IMS_ORG}}",
								"description": "Unique Identifier for your IMS Organization ({IMS_ORG})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-sandbox-name",
								"value": "{{SANDBOX_NAME}}",
								"description": "The name of the sandbox in which the operation will take place. See the [sandboxes overview documentation](https://www.adobe.io/apis/experienceplatform/home/permissions-and-sandboxes/permissions-and-sandboxes.html#!api-specification/markdown/narrative/technical_overview/sandboxes/sandboxes-overview.md) for more information.",
								"type": "string",
								"enabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://platform.adobe.io/data/foundation/schemaregistry/stats",
							"protocol": "https",
							"host": [
								"platform",
								"adobe",
								"io"
							],
							"path": [
								"data",
								"foundation",
								"schemaregistry",
								"stats"
							]
						}
					},
					"response": []
				}
			],
			"_postman_id": "c91ac700-a248-4730-a58a-962021d09797",
			"description": "Returns {TENANT_ID} along with information regarding IMS Org usage of the Schema Registry such as resource counts, recently created resources, and class usage."
		},
		{
			"name": "Schemas",
			"item": [
				{
					"name": "List all schemas within the specified container.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Begin Adobe-provided Pre-Request Scripts **/",
									"// Do not send HTTP Headers with empty variables, as Postman will send the literal variable name",
									"pm.request.headers.each(header => {",
									"    if (header.value.startsWith(\"{{\") && header.value.endsWith(\"}}\")) {",
									"        if (!pm.variables.get(header.value.substring(2, header.value.length - 2))) { pm.request.headers.remove(header.key); }",
									"    }",
									"});",
									"",
									"// Do not send HTTP URL Query Parameters with empty variables, as Postman will send the literal variable name",
									"pm.request.url.query.remove(q => { ",
									"    if (q.value.startsWith(\"{{\") && q.value.endsWith(\"}}\")) {",
									"        return !pm.variables.get(q.value.substring(2, q.value.length - 2));",
									"    } ",
									"});",
									"/** End Adobe-provided Pre-Request Scripts **/"
								]
							}
						}
					],
					"_postman_id": "c07e951b-da79-4fb8-8c61-a6abd81fccff",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.adobe.xed+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"description": "The access token provided after authorization in the format \"Bearer {ACCESS_TOKEN}\"",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"description": "Your specific API key for your unique Platform configuration ({API_KEY})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-gw-ims-org-id",
								"value": "{{IMS_ORG}}",
								"description": "Unique Identifier for your IMS Organization ({IMS_ORG})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-sandbox-name",
								"value": "{{SANDBOX_NAME}}",
								"description": "The name of the sandbox in which the operation will take place. See the [sandboxes overview documentation](https://www.adobe.io/apis/experienceplatform/home/permissions-and-sandboxes/permissions-and-sandboxes.html#!api-specification/markdown/narrative/technical_overview/sandboxes/sandboxes-overview.md) for more information.",
								"type": "string",
								"enabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://platform.adobe.io/data/foundation/schemaregistry/:CONTAINER_ID/schemas/?properties={{properties}}&orderby={{orderby}}&start={{start}}&limit={{limit}}",
							"protocol": "https",
							"host": [
								"platform",
								"adobe",
								"io"
							],
							"path": [
								"data",
								"foundation",
								"schemaregistry",
								":CONTAINER_ID",
								"schemas",
								""
							],
							"query": [
								{
									"key": "properties",
									"value": "{{properties}}"
								},
								{
									"key": "orderby",
									"value": "{{orderby}}"
								},
								{
									"key": "start",
									"value": "{{start}}"
								},
								{
									"key": "limit",
									"value": "{{limit}}"
								}
							],
							"variable": [
								{
									"value": "{{CONTAINER_ID}}",
									"id": "CONTAINER_ID"
								}
							]
						},
						"description": "<p>You are able to view a list of all schemas within a container by performing a single GET request. To help filter results, the Schema Registry supports the use of query parameters when listing resources. The most common query parameters include:</br><ul><li>limit - Limit the number of resources returned. e.g. limit=5 will return only five resources in the list.</li><li>orderby - Sort results by a specific property. e.g. orderby=title will sort results by title ascending (A-Z). Adding a - before title (orderby=-title) will sort items by title descending (Z-A).</li><li>properties - Filter results on any top-level attributes. e.g. property=meta:intendedToExtend==https://ns.adobe.com/xdm/context/profile returns only mixins that are compatible with the Profile class.</li><li>You may also use an ampersand (&) to combine query parameters.</li></ul></p><p>The response format depends on the Accept header sent in the request. The following Accept headers are available for this request:<br/><ul><li><strong>application/vnd.adobe.xed-id+json</strong> | Returns a short summary of each resource, generally the preferred header for listing.</li><li><strong>application/vnd.adobe.xed-full+json</strong> | Returns full JSON for each resource, with original $ref and allOf attributes included.</li></ul></p>"
					},
					"response": []
				},
				{
					"name": "Create a new tenant-defined schema.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Begin Adobe-provided Pre-Request Scripts **/",
									"// Do not send HTTP Headers with empty variables, as Postman will send the literal variable name",
									"pm.request.headers.each(header => {",
									"    if (header.value.startsWith(\"{{\") && header.value.endsWith(\"}}\")) {",
									"        if (!pm.variables.get(header.value.substring(2, header.value.length - 2))) { pm.request.headers.remove(header.key); }",
									"    }",
									"});",
									"",
									"// Do not send HTTP URL Query Parameters with empty variables, as Postman will send the literal variable name",
									"pm.request.url.query.remove(q => { ",
									"    if (q.value.startsWith(\"{{\") && q.value.endsWith(\"}}\")) {",
									"        return !pm.variables.get(q.value.substring(2, q.value.length - 2));",
									"    } ",
									"});",
									"/** End Adobe-provided Pre-Request Scripts **/"
								]
							}
						}
					],
					"_postman_id": "e0cc1d48-a0da-45ae-947b-237221c049e2",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.adobe.xed+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"description": "The access token provided after authorization in the format \"Bearer {ACCESS_TOKEN}\"",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"description": "Your specific API key for your unique Platform configuration ({API_KEY})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-gw-ims-org-id",
								"value": "{{IMS_ORG}}",
								"description": "Unique Identifier for your IMS Organization ({IMS_ORG})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-sandbox-name",
								"value": "{{SANDBOX_NAME}}",
								"description": "The name of the sandbox in which the operation will take place. See the [sandboxes overview documentation](https://www.adobe.io/apis/experienceplatform/home/permissions-and-sandboxes/permissions-and-sandboxes.html#!api-specification/markdown/narrative/technical_overview/sandboxes/sandboxes-overview.md) for more information.",
								"type": "string",
								"enabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{payload}}"
						},
						"url": {
							"raw": "https://platform.adobe.io/data/foundation/schemaregistry/:CONTAINER_ID/schemas/",
							"protocol": "https",
							"host": [
								"platform",
								"adobe",
								"io"
							],
							"path": [
								"data",
								"foundation",
								"schemaregistry",
								":CONTAINER_ID",
								"schemas",
								""
							],
							"variable": [
								{
									"value": "{{CONTAINER_ID}}",
									"id": "CONTAINER_ID"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Lookup a specific schema by its unique ID.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Begin Adobe-provided Pre-Request Scripts **/",
									"// Do not send HTTP Headers with empty variables, as Postman will send the literal variable name",
									"pm.request.headers.each(header => {",
									"    if (header.value.startsWith(\"{{\") && header.value.endsWith(\"}}\")) {",
									"        if (!pm.variables.get(header.value.substring(2, header.value.length - 2))) { pm.request.headers.remove(header.key); }",
									"    }",
									"});",
									"",
									"// Do not send HTTP URL Query Parameters with empty variables, as Postman will send the literal variable name",
									"pm.request.url.query.remove(q => { ",
									"    if (q.value.startsWith(\"{{\") && q.value.endsWith(\"}}\")) {",
									"        return !pm.variables.get(q.value.substring(2, q.value.length - 2));",
									"    } ",
									"});",
									"/** End Adobe-provided Pre-Request Scripts **/"
								]
							}
						}
					],
					"_postman_id": "1baa1e7d-881d-43da-9b14-b45771593121",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.adobe.xed+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"description": "The access token provided after authorization in the format \"Bearer {ACCESS_TOKEN}\"",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"description": "Your specific API key for your unique Platform configuration ({API_KEY})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-gw-ims-org-id",
								"value": "{{IMS_ORG}}",
								"description": "Unique Identifier for your IMS Organization ({IMS_ORG})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-sandbox-name",
								"value": "{{SANDBOX_NAME}}",
								"description": "The name of the sandbox in which the operation will take place. See the [sandboxes overview documentation](https://www.adobe.io/apis/experienceplatform/home/permissions-and-sandboxes/permissions-and-sandboxes.html#!api-specification/markdown/narrative/technical_overview/sandboxes/sandboxes-overview.md) for more information.",
								"type": "string",
								"enabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://platform.adobe.io/data/foundation/schemaregistry/:CONTAINER_ID/schemas/:$id",
							"protocol": "https",
							"host": [
								"platform",
								"adobe",
								"io"
							],
							"path": [
								"data",
								"foundation",
								"schemaregistry",
								":CONTAINER_ID",
								"schemas",
								":$id"
							],
							"variable": [
								{
									"value": "{{CONTAINER_ID}}",
									"id": "CONTAINER_ID"
								},
								{
									"value": "{{$id}}",
									"id": "$id"
								}
							]
						},
						"description": "<p>The response format depends on the Accept header sent in the request. The following Accept headers are available for this request:<br/><ul><li><strong>application/vnd.adobe.xed+json; version={major version}</strong>  Raw with $ref and allOf, has titles, descriptions</li><li><strong>application/vnd.adobe.xed-full+json; version={major version}</strong> $refs and allOf resolved, has titles and descriptions</li><li><strong>application/vnd.adobe.xed-notext+json; version={major version}</strong> Raw with $ref and allOf, no titles or descriptions</li><li><strong>application/vnd.adobe.xed-full-notext+json; version={major version}</strong>  $refs and allOf resolved, no titles or descriptions</li><li><strong>application/vnd.adobe.xed-full-desc+json; version={major version}</strong> $refs and allOf resolved, descriptors included</li></ul></p><br/><p>A lookup request requires the resource 'major version' be included in the Accept header. When supplying the major version, the registry returns the latest minor version automatically.</p>"
					},
					"response": []
				},
				{
					"name": "Replace a tenant-defined schema.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Begin Adobe-provided Pre-Request Scripts **/",
									"// Do not send HTTP Headers with empty variables, as Postman will send the literal variable name",
									"pm.request.headers.each(header => {",
									"    if (header.value.startsWith(\"{{\") && header.value.endsWith(\"}}\")) {",
									"        if (!pm.variables.get(header.value.substring(2, header.value.length - 2))) { pm.request.headers.remove(header.key); }",
									"    }",
									"});",
									"",
									"// Do not send HTTP URL Query Parameters with empty variables, as Postman will send the literal variable name",
									"pm.request.url.query.remove(q => { ",
									"    if (q.value.startsWith(\"{{\") && q.value.endsWith(\"}}\")) {",
									"        return !pm.variables.get(q.value.substring(2, q.value.length - 2));",
									"    } ",
									"});",
									"/** End Adobe-provided Pre-Request Scripts **/"
								]
							}
						}
					],
					"_postman_id": "52959e56-6b8e-4389-a1bb-6d5bd87bbe1e",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.adobe.xed+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"description": "The access token provided after authorization in the format \"Bearer {ACCESS_TOKEN}\"",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"description": "Your specific API key for your unique Platform configuration ({API_KEY})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-gw-ims-org-id",
								"value": "{{IMS_ORG}}",
								"description": "Unique Identifier for your IMS Organization ({IMS_ORG})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-sandbox-name",
								"value": "{{SANDBOX_NAME}}",
								"description": "The name of the sandbox in which the operation will take place. See the [sandboxes overview documentation](https://www.adobe.io/apis/experienceplatform/home/permissions-and-sandboxes/permissions-and-sandboxes.html#!api-specification/markdown/narrative/technical_overview/sandboxes/sandboxes-overview.md) for more information.",
								"type": "string",
								"enabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{payload}}"
						},
						"url": {
							"raw": "https://platform.adobe.io/data/foundation/schemaregistry/:CONTAINER_ID/schemas/:$id",
							"protocol": "https",
							"host": [
								"platform",
								"adobe",
								"io"
							],
							"path": [
								"data",
								"foundation",
								"schemaregistry",
								":CONTAINER_ID",
								"schemas",
								":$id"
							],
							"variable": [
								{
									"value": "{{CONTAINER_ID}}",
									"id": "CONTAINER_ID"
								},
								{
									"value": "{{$id}}",
									"id": "$id"
								}
							]
						},
						"description": "<p>A PUT request essentially re-writes the schema, therefore the request body must include all fields required to create (POST) a schema. This is especially useful when updating a lot of information in the schema at once.</p>"
					},
					"response": []
				},
				{
					"name": "Modify or update part of a tenant-defined schema.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Begin Adobe-provided Pre-Request Scripts **/",
									"// Do not send HTTP Headers with empty variables, as Postman will send the literal variable name",
									"pm.request.headers.each(header => {",
									"    if (header.value.startsWith(\"{{\") && header.value.endsWith(\"}}\")) {",
									"        if (!pm.variables.get(header.value.substring(2, header.value.length - 2))) { pm.request.headers.remove(header.key); }",
									"    }",
									"});",
									"",
									"// Do not send HTTP URL Query Parameters with empty variables, as Postman will send the literal variable name",
									"pm.request.url.query.remove(q => { ",
									"    if (q.value.startsWith(\"{{\") && q.value.endsWith(\"}}\")) {",
									"        return !pm.variables.get(q.value.substring(2, q.value.length - 2));",
									"    } ",
									"});",
									"/** End Adobe-provided Pre-Request Scripts **/"
								]
							}
						}
					],
					"_postman_id": "e9373cce-6461-48da-9855-318a1dc1a5cd",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.adobe.xed+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"description": "The access token provided after authorization in the format \"Bearer {ACCESS_TOKEN}\"",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"description": "Your specific API key for your unique Platform configuration ({API_KEY})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-gw-ims-org-id",
								"value": "{{IMS_ORG}}",
								"description": "Unique Identifier for your IMS Organization ({IMS_ORG})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-sandbox-name",
								"value": "{{SANDBOX_NAME}}",
								"description": "The name of the sandbox in which the operation will take place. See the [sandboxes overview documentation](https://www.adobe.io/apis/experienceplatform/home/permissions-and-sandboxes/permissions-and-sandboxes.html#!api-specification/markdown/narrative/technical_overview/sandboxes/sandboxes-overview.md) for more information.",
								"type": "string",
								"enabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{payload}}"
						},
						"url": {
							"raw": "https://platform.adobe.io/data/foundation/schemaregistry/:CONTAINER_ID/schemas/:$id",
							"protocol": "https",
							"host": [
								"platform",
								"adobe",
								"io"
							],
							"path": [
								"data",
								"foundation",
								"schemaregistry",
								":CONTAINER_ID",
								"schemas",
								":$id"
							],
							"variable": [
								{
									"value": "{{CONTAINER_ID}}",
									"id": "CONTAINER_ID"
								},
								{
									"value": "{{$id}}",
									"id": "$id"
								}
							]
						},
						"description": "<p>The Schema Registry supports all standard JSON Patch operations, including add, remove, and replace, to allow users to modify or update schemas they have defined.</p><br/><p>For more informatiom on JSON Patch, including all available operations, read the official JSON Patch documentation (<a href=\"http://jsonpatch.com/\">http://jsonpatch.com/</a>).</p>"
					},
					"response": []
				},
				{
					"name": "Remove a tenant-defined schema from the registry.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Begin Adobe-provided Pre-Request Scripts **/",
									"// Do not send HTTP Headers with empty variables, as Postman will send the literal variable name",
									"pm.request.headers.each(header => {",
									"    if (header.value.startsWith(\"{{\") && header.value.endsWith(\"}}\")) {",
									"        if (!pm.variables.get(header.value.substring(2, header.value.length - 2))) { pm.request.headers.remove(header.key); }",
									"    }",
									"});",
									"",
									"// Do not send HTTP URL Query Parameters with empty variables, as Postman will send the literal variable name",
									"pm.request.url.query.remove(q => { ",
									"    if (q.value.startsWith(\"{{\") && q.value.endsWith(\"}}\")) {",
									"        return !pm.variables.get(q.value.substring(2, q.value.length - 2));",
									"    } ",
									"});",
									"/** End Adobe-provided Pre-Request Scripts **/"
								]
							}
						}
					],
					"_postman_id": "8611932e-febc-4af2-afb6-7b520380e0d4",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.adobe.xed+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"description": "The access token provided after authorization in the format \"Bearer {ACCESS_TOKEN}\"",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"description": "Your specific API key for your unique Platform configuration ({API_KEY})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-gw-ims-org-id",
								"value": "{{IMS_ORG}}",
								"description": "Unique Identifier for your IMS Organization ({IMS_ORG})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-sandbox-name",
								"value": "{{SANDBOX_NAME}}",
								"description": "The name of the sandbox in which the operation will take place. See the [sandboxes overview documentation](https://www.adobe.io/apis/experienceplatform/home/permissions-and-sandboxes/permissions-and-sandboxes.html#!api-specification/markdown/narrative/technical_overview/sandboxes/sandboxes-overview.md) for more information.",
								"type": "string",
								"enabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://platform.adobe.io/data/foundation/schemaregistry/:CONTAINER_ID/schemas/:$id",
							"protocol": "https",
							"host": [
								"platform",
								"adobe",
								"io"
							],
							"path": [
								"data",
								"foundation",
								"schemaregistry",
								":CONTAINER_ID",
								"schemas",
								":$id"
							],
							"variable": [
								{
									"value": "{{CONTAINER_ID}}",
									"id": "CONTAINER_ID"
								},
								{
									"value": "{{$id}}",
									"id": "$id"
								}
							]
						},
						"description": "<p>Remove an existing schema by performing a DELETE request to the $id of the schema being removed.</p><br/><p>A successful deletion returns an empty response body and HTTP Status Code 204 (No-content).</p>"
					},
					"response": []
				}
			],
			"_postman_id": "7976d702-4959-4e57-8f82-a89485eca656",
			"description": "Schemas provide an abstract definition of a real-world object along with constraints and expectations that can be applied and used to validate data."
		},
		{
			"name": "Mixins",
			"item": [
				{
					"name": "Return a list of all mixins within the specified container.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Begin Adobe-provided Pre-Request Scripts **/",
									"// Do not send HTTP Headers with empty variables, as Postman will send the literal variable name",
									"pm.request.headers.each(header => {",
									"    if (header.value.startsWith(\"{{\") && header.value.endsWith(\"}}\")) {",
									"        if (!pm.variables.get(header.value.substring(2, header.value.length - 2))) { pm.request.headers.remove(header.key); }",
									"    }",
									"});",
									"",
									"// Do not send HTTP URL Query Parameters with empty variables, as Postman will send the literal variable name",
									"pm.request.url.query.remove(q => { ",
									"    if (q.value.startsWith(\"{{\") && q.value.endsWith(\"}}\")) {",
									"        return !pm.variables.get(q.value.substring(2, q.value.length - 2));",
									"    } ",
									"});",
									"/** End Adobe-provided Pre-Request Scripts **/"
								]
							}
						}
					],
					"_postman_id": "332153d9-a29b-4a5c-aecd-6732a7af5cdb",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.adobe.xed+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"description": "The access token provided after authorization in the format \"Bearer {ACCESS_TOKEN}\"",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"description": "Your specific API key for your unique Platform configuration ({API_KEY})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-gw-ims-org-id",
								"value": "{{IMS_ORG}}",
								"description": "Unique Identifier for your IMS Organization ({IMS_ORG})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-sandbox-name",
								"value": "{{SANDBOX_NAME}}",
								"description": "The name of the sandbox in which the operation will take place. See the [sandboxes overview documentation](https://www.adobe.io/apis/experienceplatform/home/permissions-and-sandboxes/permissions-and-sandboxes.html#!api-specification/markdown/narrative/technical_overview/sandboxes/sandboxes-overview.md) for more information.",
								"type": "string",
								"enabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://platform.adobe.io/data/foundation/schemaregistry/:CONTAINER_ID/mixins/?properties={{properties}}&orderby={{orderby}}&start={{start}}&limit={{limit}}",
							"protocol": "https",
							"host": [
								"platform",
								"adobe",
								"io"
							],
							"path": [
								"data",
								"foundation",
								"schemaregistry",
								":CONTAINER_ID",
								"mixins",
								""
							],
							"query": [
								{
									"key": "properties",
									"value": "{{properties}}"
								},
								{
									"key": "orderby",
									"value": "{{orderby}}"
								},
								{
									"key": "start",
									"value": "{{start}}"
								},
								{
									"key": "limit",
									"value": "{{limit}}"
								}
							],
							"variable": [
								{
									"value": "{{CONTAINER_ID}}",
									"id": "CONTAINER_ID"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new tenant-defined mixin.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Begin Adobe-provided Pre-Request Scripts **/",
									"// Do not send HTTP Headers with empty variables, as Postman will send the literal variable name",
									"pm.request.headers.each(header => {",
									"    if (header.value.startsWith(\"{{\") && header.value.endsWith(\"}}\")) {",
									"        if (!pm.variables.get(header.value.substring(2, header.value.length - 2))) { pm.request.headers.remove(header.key); }",
									"    }",
									"});",
									"",
									"// Do not send HTTP URL Query Parameters with empty variables, as Postman will send the literal variable name",
									"pm.request.url.query.remove(q => { ",
									"    if (q.value.startsWith(\"{{\") && q.value.endsWith(\"}}\")) {",
									"        return !pm.variables.get(q.value.substring(2, q.value.length - 2));",
									"    } ",
									"});",
									"/** End Adobe-provided Pre-Request Scripts **/"
								]
							}
						}
					],
					"_postman_id": "a5dec92d-b620-4979-b006-e47c87a9f791",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.adobe.xed+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"description": "The access token provided after authorization in the format \"Bearer {ACCESS_TOKEN}\"",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"description": "Your specific API key for your unique Platform configuration ({API_KEY})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-gw-ims-org-id",
								"value": "{{IMS_ORG}}",
								"description": "Unique Identifier for your IMS Organization ({IMS_ORG})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-sandbox-name",
								"value": "{{SANDBOX_NAME}}",
								"description": "The name of the sandbox in which the operation will take place. See the [sandboxes overview documentation](https://www.adobe.io/apis/experienceplatform/home/permissions-and-sandboxes/permissions-and-sandboxes.html#!api-specification/markdown/narrative/technical_overview/sandboxes/sandboxes-overview.md) for more information.",
								"type": "string",
								"enabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{payload}}"
						},
						"url": {
							"raw": "https://platform.adobe.io/data/foundation/schemaregistry/:CONTAINER_ID/mixins/",
							"protocol": "https",
							"host": [
								"platform",
								"adobe",
								"io"
							],
							"path": [
								"data",
								"foundation",
								"schemaregistry",
								":CONTAINER_ID",
								"mixins",
								""
							],
							"variable": [
								{
									"value": "{{CONTAINER_ID}}",
									"id": "CONTAINER_ID"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Lookup a specific mixin by its unique ID.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Begin Adobe-provided Pre-Request Scripts **/",
									"// Do not send HTTP Headers with empty variables, as Postman will send the literal variable name",
									"pm.request.headers.each(header => {",
									"    if (header.value.startsWith(\"{{\") && header.value.endsWith(\"}}\")) {",
									"        if (!pm.variables.get(header.value.substring(2, header.value.length - 2))) { pm.request.headers.remove(header.key); }",
									"    }",
									"});",
									"",
									"// Do not send HTTP URL Query Parameters with empty variables, as Postman will send the literal variable name",
									"pm.request.url.query.remove(q => { ",
									"    if (q.value.startsWith(\"{{\") && q.value.endsWith(\"}}\")) {",
									"        return !pm.variables.get(q.value.substring(2, q.value.length - 2));",
									"    } ",
									"});",
									"/** End Adobe-provided Pre-Request Scripts **/"
								]
							}
						}
					],
					"_postman_id": "a48a726f-c5da-422f-9ef9-3a9b74ac058f",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.adobe.xed+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"description": "The access token provided after authorization in the format \"Bearer {ACCESS_TOKEN}\"",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"description": "Your specific API key for your unique Platform configuration ({API_KEY})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-gw-ims-org-id",
								"value": "{{IMS_ORG}}",
								"description": "Unique Identifier for your IMS Organization ({IMS_ORG})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-sandbox-name",
								"value": "{{SANDBOX_NAME}}",
								"description": "The name of the sandbox in which the operation will take place. See the [sandboxes overview documentation](https://www.adobe.io/apis/experienceplatform/home/permissions-and-sandboxes/permissions-and-sandboxes.html#!api-specification/markdown/narrative/technical_overview/sandboxes/sandboxes-overview.md) for more information.",
								"type": "string",
								"enabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://platform.adobe.io/data/foundation/schemaregistry/:CONTAINER_ID/mixins/:$id",
							"protocol": "https",
							"host": [
								"platform",
								"adobe",
								"io"
							],
							"path": [
								"data",
								"foundation",
								"schemaregistry",
								":CONTAINER_ID",
								"mixins",
								":$id"
							],
							"variable": [
								{
									"value": "{{CONTAINER_ID}}",
									"id": "CONTAINER_ID"
								},
								{
									"value": "{{$id}}",
									"id": "$id"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Replace a tenant-defined mixin.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Begin Adobe-provided Pre-Request Scripts **/",
									"// Do not send HTTP Headers with empty variables, as Postman will send the literal variable name",
									"pm.request.headers.each(header => {",
									"    if (header.value.startsWith(\"{{\") && header.value.endsWith(\"}}\")) {",
									"        if (!pm.variables.get(header.value.substring(2, header.value.length - 2))) { pm.request.headers.remove(header.key); }",
									"    }",
									"});",
									"",
									"// Do not send HTTP URL Query Parameters with empty variables, as Postman will send the literal variable name",
									"pm.request.url.query.remove(q => { ",
									"    if (q.value.startsWith(\"{{\") && q.value.endsWith(\"}}\")) {",
									"        return !pm.variables.get(q.value.substring(2, q.value.length - 2));",
									"    } ",
									"});",
									"/** End Adobe-provided Pre-Request Scripts **/"
								]
							}
						}
					],
					"_postman_id": "36295bfe-6f1f-47c8-9cc8-2b258eab6896",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.adobe.xed+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"description": "The access token provided after authorization in the format \"Bearer {ACCESS_TOKEN}\"",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"description": "Your specific API key for your unique Platform configuration ({API_KEY})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-gw-ims-org-id",
								"value": "{{IMS_ORG}}",
								"description": "Unique Identifier for your IMS Organization ({IMS_ORG})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-sandbox-name",
								"value": "{{SANDBOX_NAME}}",
								"description": "The name of the sandbox in which the operation will take place. See the [sandboxes overview documentation](https://www.adobe.io/apis/experienceplatform/home/permissions-and-sandboxes/permissions-and-sandboxes.html#!api-specification/markdown/narrative/technical_overview/sandboxes/sandboxes-overview.md) for more information.",
								"type": "string",
								"enabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{payload}}"
						},
						"url": {
							"raw": "https://platform.adobe.io/data/foundation/schemaregistry/:CONTAINER_ID/mixins/:$id",
							"protocol": "https",
							"host": [
								"platform",
								"adobe",
								"io"
							],
							"path": [
								"data",
								"foundation",
								"schemaregistry",
								":CONTAINER_ID",
								"mixins",
								":$id"
							],
							"variable": [
								{
									"value": "{{CONTAINER_ID}}",
									"id": "CONTAINER_ID"
								},
								{
									"value": "{{$id}}",
									"id": "$id"
								}
							]
						},
						"description": "<p>A PUT request is essentially re-writing the mixin, therefore the request body must include all fields required to create (POST) a mixin. This is especially useful when updating a lot of information in the mixin at once.</p>"
					},
					"response": []
				},
				{
					"name": "Modify or update part of a tenant-defined mixin.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Begin Adobe-provided Pre-Request Scripts **/",
									"// Do not send HTTP Headers with empty variables, as Postman will send the literal variable name",
									"pm.request.headers.each(header => {",
									"    if (header.value.startsWith(\"{{\") && header.value.endsWith(\"}}\")) {",
									"        if (!pm.variables.get(header.value.substring(2, header.value.length - 2))) { pm.request.headers.remove(header.key); }",
									"    }",
									"});",
									"",
									"// Do not send HTTP URL Query Parameters with empty variables, as Postman will send the literal variable name",
									"pm.request.url.query.remove(q => { ",
									"    if (q.value.startsWith(\"{{\") && q.value.endsWith(\"}}\")) {",
									"        return !pm.variables.get(q.value.substring(2, q.value.length - 2));",
									"    } ",
									"});",
									"/** End Adobe-provided Pre-Request Scripts **/"
								]
							}
						}
					],
					"_postman_id": "be287b2d-349b-43d8-b8ae-756d9a07d15f",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.adobe.xed+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"description": "The access token provided after authorization in the format \"Bearer {ACCESS_TOKEN}\"",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"description": "Your specific API key for your unique Platform configuration ({API_KEY})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-gw-ims-org-id",
								"value": "{{IMS_ORG}}",
								"description": "Unique Identifier for your IMS Organization ({IMS_ORG})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-sandbox-name",
								"value": "{{SANDBOX_NAME}}",
								"description": "The name of the sandbox in which the operation will take place. See the [sandboxes overview documentation](https://www.adobe.io/apis/experienceplatform/home/permissions-and-sandboxes/permissions-and-sandboxes.html#!api-specification/markdown/narrative/technical_overview/sandboxes/sandboxes-overview.md) for more information.",
								"type": "string",
								"enabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{payload}}"
						},
						"url": {
							"raw": "https://platform.adobe.io/data/foundation/schemaregistry/:CONTAINER_ID/mixins/:$id",
							"protocol": "https",
							"host": [
								"platform",
								"adobe",
								"io"
							],
							"path": [
								"data",
								"foundation",
								"schemaregistry",
								":CONTAINER_ID",
								"mixins",
								":$id"
							],
							"variable": [
								{
									"value": "{{CONTAINER_ID}}",
									"id": "CONTAINER_ID"
								},
								{
									"value": "{{$id}}",
									"id": "$id"
								}
							]
						},
						"description": "<p>The Schema Registry supports all standard JSON Patch operations, including add, remove, and replace, to allow users to modify or update mixins they have defined.</p><br/><p>For more informatiom on JSON Patch, including all available operations, read the official JSON Patch documentation (<a href=\"http://jsonpatch.com/\">http://jsonpatch.com/</a>).</p>"
					},
					"response": []
				},
				{
					"name": "Remove a tenant-defined mixin from the registry.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Begin Adobe-provided Pre-Request Scripts **/",
									"// Do not send HTTP Headers with empty variables, as Postman will send the literal variable name",
									"pm.request.headers.each(header => {",
									"    if (header.value.startsWith(\"{{\") && header.value.endsWith(\"}}\")) {",
									"        if (!pm.variables.get(header.value.substring(2, header.value.length - 2))) { pm.request.headers.remove(header.key); }",
									"    }",
									"});",
									"",
									"// Do not send HTTP URL Query Parameters with empty variables, as Postman will send the literal variable name",
									"pm.request.url.query.remove(q => { ",
									"    if (q.value.startsWith(\"{{\") && q.value.endsWith(\"}}\")) {",
									"        return !pm.variables.get(q.value.substring(2, q.value.length - 2));",
									"    } ",
									"});",
									"/** End Adobe-provided Pre-Request Scripts **/"
								]
							}
						}
					],
					"_postman_id": "cf7dba93-a5e4-4dfb-9ca1-e93b0dac7f72",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.adobe.xed+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"description": "The access token provided after authorization in the format \"Bearer {ACCESS_TOKEN}\"",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"description": "Your specific API key for your unique Platform configuration ({API_KEY})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-gw-ims-org-id",
								"value": "{{IMS_ORG}}",
								"description": "Unique Identifier for your IMS Organization ({IMS_ORG})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-sandbox-name",
								"value": "{{SANDBOX_NAME}}",
								"description": "The name of the sandbox in which the operation will take place. See the [sandboxes overview documentation](https://www.adobe.io/apis/experienceplatform/home/permissions-and-sandboxes/permissions-and-sandboxes.html#!api-specification/markdown/narrative/technical_overview/sandboxes/sandboxes-overview.md) for more information.",
								"type": "string",
								"enabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://platform.adobe.io/data/foundation/schemaregistry/:CONTAINER_ID/mixins/:$id",
							"protocol": "https",
							"host": [
								"platform",
								"adobe",
								"io"
							],
							"path": [
								"data",
								"foundation",
								"schemaregistry",
								":CONTAINER_ID",
								"mixins",
								":$id"
							],
							"variable": [
								{
									"value": "{{CONTAINER_ID}}",
									"id": "CONTAINER_ID"
								},
								{
									"value": "{{$id}}",
									"id": "$id"
								}
							]
						},
						"description": "<p>Remove an existing mixin through a DELETE request to the $id of the mixin being removed.</p><br/><p>A successful deletion returns an empty response body and HTTP Status Code 204 (No-content).</p>"
					},
					"response": []
				}
			],
			"_postman_id": "15e00a7c-463f-4f1b-a54e-c9f11c364d45",
			"description": "A mixin is a reusable component that defines one or more fields to implement certain functions within a schema based on a compatible class."
		},
		{
			"name": "Classes",
			"item": [
				{
					"name": "List all classes in the specified container.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Begin Adobe-provided Pre-Request Scripts **/",
									"// Do not send HTTP Headers with empty variables, as Postman will send the literal variable name",
									"pm.request.headers.each(header => {",
									"    if (header.value.startsWith(\"{{\") && header.value.endsWith(\"}}\")) {",
									"        if (!pm.variables.get(header.value.substring(2, header.value.length - 2))) { pm.request.headers.remove(header.key); }",
									"    }",
									"});",
									"",
									"// Do not send HTTP URL Query Parameters with empty variables, as Postman will send the literal variable name",
									"pm.request.url.query.remove(q => { ",
									"    if (q.value.startsWith(\"{{\") && q.value.endsWith(\"}}\")) {",
									"        return !pm.variables.get(q.value.substring(2, q.value.length - 2));",
									"    } ",
									"});",
									"/** End Adobe-provided Pre-Request Scripts **/"
								]
							}
						}
					],
					"_postman_id": "402aa766-8d9c-4615-b8be-f2b4fe8e527b",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.adobe.xed+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"description": "The access token provided after authorization in the format \"Bearer {ACCESS_TOKEN}\"",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"description": "Your specific API key for your unique Platform configuration ({API_KEY})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-gw-ims-org-id",
								"value": "{{IMS_ORG}}",
								"description": "Unique Identifier for your IMS Organization ({IMS_ORG})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-sandbox-name",
								"value": "{{SANDBOX_NAME}}",
								"description": "The name of the sandbox in which the operation will take place. See the [sandboxes overview documentation](https://www.adobe.io/apis/experienceplatform/home/permissions-and-sandboxes/permissions-and-sandboxes.html#!api-specification/markdown/narrative/technical_overview/sandboxes/sandboxes-overview.md) for more information.",
								"type": "string",
								"enabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://platform.adobe.io/data/foundation/schemaregistry/:CONTAINER_ID/classes/?properties={{properties}}&orderby={{orderby}}&start={{start}}&limit={{limit}}",
							"protocol": "https",
							"host": [
								"platform",
								"adobe",
								"io"
							],
							"path": [
								"data",
								"foundation",
								"schemaregistry",
								":CONTAINER_ID",
								"classes",
								""
							],
							"query": [
								{
									"key": "properties",
									"value": "{{properties}}"
								},
								{
									"key": "orderby",
									"value": "{{orderby}}"
								},
								{
									"key": "start",
									"value": "{{start}}"
								},
								{
									"key": "limit",
									"value": "{{limit}}"
								}
							],
							"variable": [
								{
									"value": "{{CONTAINER_ID}}",
									"id": "CONTAINER_ID"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a tenant-defined class.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Begin Adobe-provided Pre-Request Scripts **/",
									"// Do not send HTTP Headers with empty variables, as Postman will send the literal variable name",
									"pm.request.headers.each(header => {",
									"    if (header.value.startsWith(\"{{\") && header.value.endsWith(\"}}\")) {",
									"        if (!pm.variables.get(header.value.substring(2, header.value.length - 2))) { pm.request.headers.remove(header.key); }",
									"    }",
									"});",
									"",
									"// Do not send HTTP URL Query Parameters with empty variables, as Postman will send the literal variable name",
									"pm.request.url.query.remove(q => { ",
									"    if (q.value.startsWith(\"{{\") && q.value.endsWith(\"}}\")) {",
									"        return !pm.variables.get(q.value.substring(2, q.value.length - 2));",
									"    } ",
									"});",
									"/** End Adobe-provided Pre-Request Scripts **/"
								]
							}
						}
					],
					"_postman_id": "7a1e9004-8a11-4abb-b207-8e04dc47fb89",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.adobe.xed+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"description": "The access token provided after authorization in the format \"Bearer {ACCESS_TOKEN}\"",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"description": "Your specific API key for your unique Platform configuration ({API_KEY})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-gw-ims-org-id",
								"value": "{{IMS_ORG}}",
								"description": "Unique Identifier for your IMS Organization ({IMS_ORG})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-sandbox-name",
								"value": "{{SANDBOX_NAME}}",
								"description": "The name of the sandbox in which the operation will take place. See the [sandboxes overview documentation](https://www.adobe.io/apis/experienceplatform/home/permissions-and-sandboxes/permissions-and-sandboxes.html#!api-specification/markdown/narrative/technical_overview/sandboxes/sandboxes-overview.md) for more information.",
								"type": "string",
								"enabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{payload}}"
						},
						"url": {
							"raw": "https://platform.adobe.io/data/foundation/schemaregistry/:CONTAINER_ID/classes/",
							"protocol": "https",
							"host": [
								"platform",
								"adobe",
								"io"
							],
							"path": [
								"data",
								"foundation",
								"schemaregistry",
								":CONTAINER_ID",
								"classes",
								""
							],
							"variable": [
								{
									"value": "{{CONTAINER_ID}}",
									"id": "CONTAINER_ID"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Lookup a specific class by its unique ID.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Begin Adobe-provided Pre-Request Scripts **/",
									"// Do not send HTTP Headers with empty variables, as Postman will send the literal variable name",
									"pm.request.headers.each(header => {",
									"    if (header.value.startsWith(\"{{\") && header.value.endsWith(\"}}\")) {",
									"        if (!pm.variables.get(header.value.substring(2, header.value.length - 2))) { pm.request.headers.remove(header.key); }",
									"    }",
									"});",
									"",
									"// Do not send HTTP URL Query Parameters with empty variables, as Postman will send the literal variable name",
									"pm.request.url.query.remove(q => { ",
									"    if (q.value.startsWith(\"{{\") && q.value.endsWith(\"}}\")) {",
									"        return !pm.variables.get(q.value.substring(2, q.value.length - 2));",
									"    } ",
									"});",
									"/** End Adobe-provided Pre-Request Scripts **/"
								]
							}
						}
					],
					"_postman_id": "22eb14cd-fd7a-40b9-9749-d25c809c28ee",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.adobe.xed+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"description": "The access token provided after authorization in the format \"Bearer {ACCESS_TOKEN}\"",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"description": "Your specific API key for your unique Platform configuration ({API_KEY})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-gw-ims-org-id",
								"value": "{{IMS_ORG}}",
								"description": "Unique Identifier for your IMS Organization ({IMS_ORG})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-sandbox-name",
								"value": "{{SANDBOX_NAME}}",
								"description": "The name of the sandbox in which the operation will take place. See the [sandboxes overview documentation](https://www.adobe.io/apis/experienceplatform/home/permissions-and-sandboxes/permissions-and-sandboxes.html#!api-specification/markdown/narrative/technical_overview/sandboxes/sandboxes-overview.md) for more information.",
								"type": "string",
								"enabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://platform.adobe.io/data/foundation/schemaregistry/:CONTAINER_ID/classes/:$id",
							"protocol": "https",
							"host": [
								"platform",
								"adobe",
								"io"
							],
							"path": [
								"data",
								"foundation",
								"schemaregistry",
								":CONTAINER_ID",
								"classes",
								":$id"
							],
							"variable": [
								{
									"value": "{{CONTAINER_ID}}",
									"id": "CONTAINER_ID"
								},
								{
									"value": "{{$id}}",
									"id": "$id"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Replace a tenant-defined class.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Begin Adobe-provided Pre-Request Scripts **/",
									"// Do not send HTTP Headers with empty variables, as Postman will send the literal variable name",
									"pm.request.headers.each(header => {",
									"    if (header.value.startsWith(\"{{\") && header.value.endsWith(\"}}\")) {",
									"        if (!pm.variables.get(header.value.substring(2, header.value.length - 2))) { pm.request.headers.remove(header.key); }",
									"    }",
									"});",
									"",
									"// Do not send HTTP URL Query Parameters with empty variables, as Postman will send the literal variable name",
									"pm.request.url.query.remove(q => { ",
									"    if (q.value.startsWith(\"{{\") && q.value.endsWith(\"}}\")) {",
									"        return !pm.variables.get(q.value.substring(2, q.value.length - 2));",
									"    } ",
									"});",
									"/** End Adobe-provided Pre-Request Scripts **/"
								]
							}
						}
					],
					"_postman_id": "395300f7-81dc-4033-8ca4-40be7788c8f8",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.adobe.xed+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"description": "The access token provided after authorization in the format \"Bearer {ACCESS_TOKEN}\"",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"description": "Your specific API key for your unique Platform configuration ({API_KEY})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-gw-ims-org-id",
								"value": "{{IMS_ORG}}",
								"description": "Unique Identifier for your IMS Organization ({IMS_ORG})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-sandbox-name",
								"value": "{{SANDBOX_NAME}}",
								"description": "The name of the sandbox in which the operation will take place. See the [sandboxes overview documentation](https://www.adobe.io/apis/experienceplatform/home/permissions-and-sandboxes/permissions-and-sandboxes.html#!api-specification/markdown/narrative/technical_overview/sandboxes/sandboxes-overview.md) for more information.",
								"type": "string",
								"enabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{payload}}"
						},
						"url": {
							"raw": "https://platform.adobe.io/data/foundation/schemaregistry/:CONTAINER_ID/classes/:$id",
							"protocol": "https",
							"host": [
								"platform",
								"adobe",
								"io"
							],
							"path": [
								"data",
								"foundation",
								"schemaregistry",
								":CONTAINER_ID",
								"classes",
								":$id"
							],
							"variable": [
								{
									"value": "{{CONTAINER_ID}}",
									"id": "CONTAINER_ID"
								},
								{
									"value": "{{$id}}",
									"id": "$id"
								}
							]
						},
						"description": "<p>A PUT request is essentially re-writing the class, therefore the request body must include all fields required to create (POST) a class. This is especially useful when updating a lot of information in the class at once.</p>"
					},
					"response": []
				},
				{
					"name": "Modify or update part of a tenant-defined class.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Begin Adobe-provided Pre-Request Scripts **/",
									"// Do not send HTTP Headers with empty variables, as Postman will send the literal variable name",
									"pm.request.headers.each(header => {",
									"    if (header.value.startsWith(\"{{\") && header.value.endsWith(\"}}\")) {",
									"        if (!pm.variables.get(header.value.substring(2, header.value.length - 2))) { pm.request.headers.remove(header.key); }",
									"    }",
									"});",
									"",
									"// Do not send HTTP URL Query Parameters with empty variables, as Postman will send the literal variable name",
									"pm.request.url.query.remove(q => { ",
									"    if (q.value.startsWith(\"{{\") && q.value.endsWith(\"}}\")) {",
									"        return !pm.variables.get(q.value.substring(2, q.value.length - 2));",
									"    } ",
									"});",
									"/** End Adobe-provided Pre-Request Scripts **/"
								]
							}
						}
					],
					"_postman_id": "f7067a26-002f-4d53-985b-9e774288c2b1",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.adobe.xed+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"description": "The access token provided after authorization in the format \"Bearer {ACCESS_TOKEN}\"",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"description": "Your specific API key for your unique Platform configuration ({API_KEY})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-gw-ims-org-id",
								"value": "{{IMS_ORG}}",
								"description": "Unique Identifier for your IMS Organization ({IMS_ORG})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-sandbox-name",
								"value": "{{SANDBOX_NAME}}",
								"description": "The name of the sandbox in which the operation will take place. See the [sandboxes overview documentation](https://www.adobe.io/apis/experienceplatform/home/permissions-and-sandboxes/permissions-and-sandboxes.html#!api-specification/markdown/narrative/technical_overview/sandboxes/sandboxes-overview.md) for more information.",
								"type": "string",
								"enabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{payload}}"
						},
						"url": {
							"raw": "https://platform.adobe.io/data/foundation/schemaregistry/:CONTAINER_ID/classes/:$id",
							"protocol": "https",
							"host": [
								"platform",
								"adobe",
								"io"
							],
							"path": [
								"data",
								"foundation",
								"schemaregistry",
								":CONTAINER_ID",
								"classes",
								":$id"
							],
							"variable": [
								{
									"value": "{{CONTAINER_ID}}",
									"id": "CONTAINER_ID"
								},
								{
									"value": "{{$id}}",
									"id": "$id"
								}
							]
						},
						"description": "<p>The Schema Registry supports all standard JSON Patch operations, including add, remove, and replace, to allow users to modify or update classes they have defined.</p><br/><p>For more informatiom on JSON Patch, including all available operations, read the official JSON Patch documentation (<a href=\"http://jsonpatch.com/\">http://jsonpatch.com/</a>).</p>"
					},
					"response": []
				},
				{
					"name": "Remove a tenant-defined class from the registry.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Begin Adobe-provided Pre-Request Scripts **/",
									"// Do not send HTTP Headers with empty variables, as Postman will send the literal variable name",
									"pm.request.headers.each(header => {",
									"    if (header.value.startsWith(\"{{\") && header.value.endsWith(\"}}\")) {",
									"        if (!pm.variables.get(header.value.substring(2, header.value.length - 2))) { pm.request.headers.remove(header.key); }",
									"    }",
									"});",
									"",
									"// Do not send HTTP URL Query Parameters with empty variables, as Postman will send the literal variable name",
									"pm.request.url.query.remove(q => { ",
									"    if (q.value.startsWith(\"{{\") && q.value.endsWith(\"}}\")) {",
									"        return !pm.variables.get(q.value.substring(2, q.value.length - 2));",
									"    } ",
									"});",
									"/** End Adobe-provided Pre-Request Scripts **/"
								]
							}
						}
					],
					"_postman_id": "3b081d9a-b6f8-4b13-b385-b86b6626483c",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.adobe.xed+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"description": "The access token provided after authorization in the format \"Bearer {ACCESS_TOKEN}\"",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"description": "Your specific API key for your unique Platform configuration ({API_KEY})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-gw-ims-org-id",
								"value": "{{IMS_ORG}}",
								"description": "Unique Identifier for your IMS Organization ({IMS_ORG})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-sandbox-name",
								"value": "{{SANDBOX_NAME}}",
								"description": "The name of the sandbox in which the operation will take place. See the [sandboxes overview documentation](https://www.adobe.io/apis/experienceplatform/home/permissions-and-sandboxes/permissions-and-sandboxes.html#!api-specification/markdown/narrative/technical_overview/sandboxes/sandboxes-overview.md) for more information.",
								"type": "string",
								"enabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://platform.adobe.io/data/foundation/schemaregistry/:CONTAINER_ID/classes/:$id",
							"protocol": "https",
							"host": [
								"platform",
								"adobe",
								"io"
							],
							"path": [
								"data",
								"foundation",
								"schemaregistry",
								":CONTAINER_ID",
								"classes",
								":$id"
							],
							"variable": [
								{
									"value": "{{CONTAINER_ID}}",
									"id": "CONTAINER_ID"
								},
								{
									"value": "{{$id}}",
									"id": "$id"
								}
							]
						},
						"description": "<p>Remove a class by performing a DELETE request to the $id of the class being removed.</p><br/><p>A successful deletion returns an empty response body and HTTP Status Code 204 (No-content).</p>"
					},
					"response": []
				}
			],
			"_postman_id": "2df5f887-ce81-4b2b-9b10-f4630db94ad8",
			"description": "Classes define behavioral aspects of the data within the schema and describe the smallest number of common properties contained in all schemas that implement the same class."
		},
		{
			"name": "Data Types",
			"item": [
				{
					"name": "List all data types in the specified container.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Begin Adobe-provided Pre-Request Scripts **/",
									"// Do not send HTTP Headers with empty variables, as Postman will send the literal variable name",
									"pm.request.headers.each(header => {",
									"    if (header.value.startsWith(\"{{\") && header.value.endsWith(\"}}\")) {",
									"        if (!pm.variables.get(header.value.substring(2, header.value.length - 2))) { pm.request.headers.remove(header.key); }",
									"    }",
									"});",
									"",
									"// Do not send HTTP URL Query Parameters with empty variables, as Postman will send the literal variable name",
									"pm.request.url.query.remove(q => { ",
									"    if (q.value.startsWith(\"{{\") && q.value.endsWith(\"}}\")) {",
									"        return !pm.variables.get(q.value.substring(2, q.value.length - 2));",
									"    } ",
									"});",
									"/** End Adobe-provided Pre-Request Scripts **/"
								]
							}
						}
					],
					"_postman_id": "dcfd09e5-60c7-41de-adae-7267264c6c50",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.adobe.xed+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"description": "Your specific API key for your unique Platform configuration ({API_KEY})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-gw-ims-org-id",
								"value": "{{IMS_ORG}}",
								"description": "Unique Identifier for your IMS Organization ({IMS_ORG})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-sandbox-name",
								"value": "{{SANDBOX_NAME}}",
								"description": "The name of the sandbox in which the operation will take place. See the [sandboxes overview documentation](https://www.adobe.io/apis/experienceplatform/home/permissions-and-sandboxes/permissions-and-sandboxes.html#!api-specification/markdown/narrative/technical_overview/sandboxes/sandboxes-overview.md) for more information.",
								"type": "string",
								"enabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"description": "The access token provided after authorization in the format \"Bearer {ACCESS_TOKEN}\"",
								"type": "string",
								"enabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://platform.adobe.io/data/foundation/schemaregistry/:CONTAINER_ID/datatypes/?properties={{properties}}&orderby={{orderby}}&start={{start}}&limit={{limit}}",
							"protocol": "https",
							"host": [
								"platform",
								"adobe",
								"io"
							],
							"path": [
								"data",
								"foundation",
								"schemaregistry",
								":CONTAINER_ID",
								"datatypes",
								""
							],
							"query": [
								{
									"key": "properties",
									"value": "{{properties}}"
								},
								{
									"key": "orderby",
									"value": "{{orderby}}"
								},
								{
									"key": "start",
									"value": "{{start}}"
								},
								{
									"key": "limit",
									"value": "{{limit}}"
								}
							],
							"variable": [
								{
									"value": "{{CONTAINER_ID}}",
									"id": "CONTAINER_ID"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a tenant-defined data type.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Begin Adobe-provided Pre-Request Scripts **/",
									"// Do not send HTTP Headers with empty variables, as Postman will send the literal variable name",
									"pm.request.headers.each(header => {",
									"    if (header.value.startsWith(\"{{\") && header.value.endsWith(\"}}\")) {",
									"        if (!pm.variables.get(header.value.substring(2, header.value.length - 2))) { pm.request.headers.remove(header.key); }",
									"    }",
									"});",
									"",
									"// Do not send HTTP URL Query Parameters with empty variables, as Postman will send the literal variable name",
									"pm.request.url.query.remove(q => { ",
									"    if (q.value.startsWith(\"{{\") && q.value.endsWith(\"}}\")) {",
									"        return !pm.variables.get(q.value.substring(2, q.value.length - 2));",
									"    } ",
									"});",
									"/** End Adobe-provided Pre-Request Scripts **/"
								]
							}
						}
					],
					"_postman_id": "0a792936-ad8b-4486-a131-e70578278e2d",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.adobe.xed+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"description": "Your specific API key for your unique Platform configuration ({API_KEY})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-gw-ims-org-id",
								"value": "{{IMS_ORG}}",
								"description": "Unique Identifier for your IMS Organization ({IMS_ORG})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-sandbox-name",
								"value": "{{SANDBOX_NAME}}",
								"description": "The name of the sandbox in which the operation will take place. See the [sandboxes overview documentation](https://www.adobe.io/apis/experienceplatform/home/permissions-and-sandboxes/permissions-and-sandboxes.html#!api-specification/markdown/narrative/technical_overview/sandboxes/sandboxes-overview.md) for more information.",
								"type": "string",
								"enabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"description": "The access token provided after authorization in the format \"Bearer {ACCESS_TOKEN}\"",
								"type": "string",
								"enabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{payload}}"
						},
						"url": {
							"raw": "https://platform.adobe.io/data/foundation/schemaregistry/:CONTAINER_ID/datatypes/",
							"protocol": "https",
							"host": [
								"platform",
								"adobe",
								"io"
							],
							"path": [
								"data",
								"foundation",
								"schemaregistry",
								":CONTAINER_ID",
								"datatypes",
								""
							],
							"variable": [
								{
									"value": "{{CONTAINER_ID}}",
									"id": "CONTAINER_ID"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns the datatype schema associated with the given identifier.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Begin Adobe-provided Pre-Request Scripts **/",
									"// Do not send HTTP Headers with empty variables, as Postman will send the literal variable name",
									"pm.request.headers.each(header => {",
									"    if (header.value.startsWith(\"{{\") && header.value.endsWith(\"}}\")) {",
									"        if (!pm.variables.get(header.value.substring(2, header.value.length - 2))) { pm.request.headers.remove(header.key); }",
									"    }",
									"});",
									"",
									"// Do not send HTTP URL Query Parameters with empty variables, as Postman will send the literal variable name",
									"pm.request.url.query.remove(q => { ",
									"    if (q.value.startsWith(\"{{\") && q.value.endsWith(\"}}\")) {",
									"        return !pm.variables.get(q.value.substring(2, q.value.length - 2));",
									"    } ",
									"});",
									"/** End Adobe-provided Pre-Request Scripts **/"
								]
							}
						}
					],
					"_postman_id": "8cdb26ac-6846-4c77-b4d2-09ecd4be488c",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.adobe.xed+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"description": "The access token provided after authorization in the format \"Bearer {ACCESS_TOKEN}\"",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"description": "Your specific API key for your unique Platform configuration ({API_KEY})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-gw-ims-org-id",
								"value": "{{IMS_ORG}}",
								"description": "Unique Identifier for your IMS Organization ({IMS_ORG})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-sandbox-name",
								"value": "{{SANDBOX_NAME}}",
								"description": "The name of the sandbox in which the operation will take place. See the [sandboxes overview documentation](https://www.adobe.io/apis/experienceplatform/home/permissions-and-sandboxes/permissions-and-sandboxes.html#!api-specification/markdown/narrative/technical_overview/sandboxes/sandboxes-overview.md) for more information.",
								"type": "string",
								"enabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://platform.adobe.io/data/foundation/schemaregistry/:CONTAINER_ID/datatypes/:$id",
							"protocol": "https",
							"host": [
								"platform",
								"adobe",
								"io"
							],
							"path": [
								"data",
								"foundation",
								"schemaregistry",
								":CONTAINER_ID",
								"datatypes",
								":$id"
							],
							"variable": [
								{
									"value": "{{CONTAINER_ID}}",
									"id": "CONTAINER_ID"
								},
								{
									"value": "{{$id}}",
									"id": "$id"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Replace a tenant-defined data type.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Begin Adobe-provided Pre-Request Scripts **/",
									"// Do not send HTTP Headers with empty variables, as Postman will send the literal variable name",
									"pm.request.headers.each(header => {",
									"    if (header.value.startsWith(\"{{\") && header.value.endsWith(\"}}\")) {",
									"        if (!pm.variables.get(header.value.substring(2, header.value.length - 2))) { pm.request.headers.remove(header.key); }",
									"    }",
									"});",
									"",
									"// Do not send HTTP URL Query Parameters with empty variables, as Postman will send the literal variable name",
									"pm.request.url.query.remove(q => { ",
									"    if (q.value.startsWith(\"{{\") && q.value.endsWith(\"}}\")) {",
									"        return !pm.variables.get(q.value.substring(2, q.value.length - 2));",
									"    } ",
									"});",
									"/** End Adobe-provided Pre-Request Scripts **/"
								]
							}
						}
					],
					"_postman_id": "613e2f55-1836-477d-8d77-0a2f831ca33f",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.adobe.xed+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"description": "The access token provided after authorization in the format \"Bearer {ACCESS_TOKEN}\"",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"description": "Your specific API key for your unique Platform configuration ({API_KEY})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-gw-ims-org-id",
								"value": "{{IMS_ORG}}",
								"description": "Unique Identifier for your IMS Organization ({IMS_ORG})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-sandbox-name",
								"value": "{{SANDBOX_NAME}}",
								"description": "The name of the sandbox in which the operation will take place. See the [sandboxes overview documentation](https://www.adobe.io/apis/experienceplatform/home/permissions-and-sandboxes/permissions-and-sandboxes.html#!api-specification/markdown/narrative/technical_overview/sandboxes/sandboxes-overview.md) for more information.",
								"type": "string",
								"enabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{payload}}"
						},
						"url": {
							"raw": "https://platform.adobe.io/data/foundation/schemaregistry/:CONTAINER_ID/datatypes/:$id",
							"protocol": "https",
							"host": [
								"platform",
								"adobe",
								"io"
							],
							"path": [
								"data",
								"foundation",
								"schemaregistry",
								":CONTAINER_ID",
								"datatypes",
								":$id"
							],
							"variable": [
								{
									"value": "{{CONTAINER_ID}}",
									"id": "CONTAINER_ID"
								},
								{
									"value": "{{$id}}",
									"id": "$id"
								}
							]
						},
						"description": "<p>A PUT request is essentially re-writing the data type, therefore the request body must include all fields required to create (POST) a data type. This is especially useful when updating a lot of information in the data type at once.</p>"
					},
					"response": []
				},
				{
					"name": "Modify or update part of a tenant-defined data type.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Begin Adobe-provided Pre-Request Scripts **/",
									"// Do not send HTTP Headers with empty variables, as Postman will send the literal variable name",
									"pm.request.headers.each(header => {",
									"    if (header.value.startsWith(\"{{\") && header.value.endsWith(\"}}\")) {",
									"        if (!pm.variables.get(header.value.substring(2, header.value.length - 2))) { pm.request.headers.remove(header.key); }",
									"    }",
									"});",
									"",
									"// Do not send HTTP URL Query Parameters with empty variables, as Postman will send the literal variable name",
									"pm.request.url.query.remove(q => { ",
									"    if (q.value.startsWith(\"{{\") && q.value.endsWith(\"}}\")) {",
									"        return !pm.variables.get(q.value.substring(2, q.value.length - 2));",
									"    } ",
									"});",
									"/** End Adobe-provided Pre-Request Scripts **/"
								]
							}
						}
					],
					"_postman_id": "fed23d07-7d32-44e8-9f4f-470179d50af2",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.adobe.xed+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"description": "The access token provided after authorization in the format \"Bearer {ACCESS_TOKEN}\"",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"description": "Your specific API key for your unique Platform configuration ({API_KEY})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-gw-ims-org-id",
								"value": "{{IMS_ORG}}",
								"description": "Unique Identifier for your IMS Organization ({IMS_ORG})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-sandbox-name",
								"value": "{{SANDBOX_NAME}}",
								"description": "The name of the sandbox in which the operation will take place. See the [sandboxes overview documentation](https://www.adobe.io/apis/experienceplatform/home/permissions-and-sandboxes/permissions-and-sandboxes.html#!api-specification/markdown/narrative/technical_overview/sandboxes/sandboxes-overview.md) for more information.",
								"type": "string",
								"enabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{payload}}"
						},
						"url": {
							"raw": "https://platform.adobe.io/data/foundation/schemaregistry/:CONTAINER_ID/datatypes/:$id",
							"protocol": "https",
							"host": [
								"platform",
								"adobe",
								"io"
							],
							"path": [
								"data",
								"foundation",
								"schemaregistry",
								":CONTAINER_ID",
								"datatypes",
								":$id"
							],
							"variable": [
								{
									"value": "{{CONTAINER_ID}}",
									"id": "CONTAINER_ID"
								},
								{
									"value": "{{$id}}",
									"id": "$id"
								}
							]
						},
						"description": "<p>The Schema Registry supports all standard JSON Patch operations, including add, remove, and replace, to allow users to modify or update data types they have defined.</p><br/><p>For more informatiom on JSON Patch, including all available operations, read the official JSON Patch documentation (<a href=\"http://jsonpatch.com/\">http://jsonpatch.com/</a>).</p>"
					},
					"response": []
				},
				{
					"name": "Remove a tenant-defined data type from the registry.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Begin Adobe-provided Pre-Request Scripts **/",
									"// Do not send HTTP Headers with empty variables, as Postman will send the literal variable name",
									"pm.request.headers.each(header => {",
									"    if (header.value.startsWith(\"{{\") && header.value.endsWith(\"}}\")) {",
									"        if (!pm.variables.get(header.value.substring(2, header.value.length - 2))) { pm.request.headers.remove(header.key); }",
									"    }",
									"});",
									"",
									"// Do not send HTTP URL Query Parameters with empty variables, as Postman will send the literal variable name",
									"pm.request.url.query.remove(q => { ",
									"    if (q.value.startsWith(\"{{\") && q.value.endsWith(\"}}\")) {",
									"        return !pm.variables.get(q.value.substring(2, q.value.length - 2));",
									"    } ",
									"});",
									"/** End Adobe-provided Pre-Request Scripts **/"
								]
							}
						}
					],
					"_postman_id": "969d84f0-1ca8-41d6-a82c-4e238b2d5175",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.adobe.xed+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"description": "The access token provided after authorization in the format \"Bearer {ACCESS_TOKEN}\"",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"description": "Your specific API key for your unique Platform configuration ({API_KEY})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-gw-ims-org-id",
								"value": "{{IMS_ORG}}",
								"description": "Unique Identifier for your IMS Organization ({IMS_ORG})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-sandbox-name",
								"value": "{{SANDBOX_NAME}}",
								"description": "The name of the sandbox in which the operation will take place. See the [sandboxes overview documentation](https://www.adobe.io/apis/experienceplatform/home/permissions-and-sandboxes/permissions-and-sandboxes.html#!api-specification/markdown/narrative/technical_overview/sandboxes/sandboxes-overview.md) for more information.",
								"type": "string",
								"enabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://platform.adobe.io/data/foundation/schemaregistry/:CONTAINER_ID/datatypes/:$id",
							"protocol": "https",
							"host": [
								"platform",
								"adobe",
								"io"
							],
							"path": [
								"data",
								"foundation",
								"schemaregistry",
								":CONTAINER_ID",
								"datatypes",
								":$id"
							],
							"variable": [
								{
									"value": "{{CONTAINER_ID}}",
									"id": "CONTAINER_ID"
								},
								{
									"value": "{{$id}}",
									"id": "$id"
								}
							]
						},
						"description": "<p>Removing a data type is done through a DELETE request to the $id of the data type being removed.</p><br/><p>A successful deletion returns an empty response body and HTTP Status Code 204 (No-content).</p>"
					},
					"response": []
				}
			],
			"_postman_id": "7d4ec833-5fc1-485e-bb86-5b06cd98471d",
			"description": "Data types are used as reference field types in classes or schemas to define complex types. Data types may define multiple sub-fields providing a consistent multi-field structure."
		},
		{
			"name": "Descriptors",
			"item": [
				{
					"name": "List all descriptors within the specified container, by type.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Begin Adobe-provided Pre-Request Scripts **/",
									"// Do not send HTTP Headers with empty variables, as Postman will send the literal variable name",
									"pm.request.headers.each(header => {",
									"    if (header.value.startsWith(\"{{\") && header.value.endsWith(\"}}\")) {",
									"        if (!pm.variables.get(header.value.substring(2, header.value.length - 2))) { pm.request.headers.remove(header.key); }",
									"    }",
									"});",
									"",
									"// Do not send HTTP URL Query Parameters with empty variables, as Postman will send the literal variable name",
									"pm.request.url.query.remove(q => { ",
									"    if (q.value.startsWith(\"{{\") && q.value.endsWith(\"}}\")) {",
									"        return !pm.variables.get(q.value.substring(2, q.value.length - 2));",
									"    } ",
									"});",
									"/** End Adobe-provided Pre-Request Scripts **/"
								]
							}
						}
					],
					"_postman_id": "c8c79369-b9d1-43cc-9877-7c55bc999622",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.adobe.xed+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"description": "The access token provided after authorization in the format \"Bearer {ACCESS_TOKEN}\"",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"description": "Your specific API key for your unique Platform configuration ({API_KEY})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-gw-ims-org-id",
								"value": "{{IMS_ORG}}",
								"description": "Unique Identifier for your IMS Organization ({IMS_ORG})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-sandbox-name",
								"value": "{{SANDBOX_NAME}}",
								"description": "The name of the sandbox in which the operation will take place. See the [sandboxes overview documentation](https://www.adobe.io/apis/experienceplatform/home/permissions-and-sandboxes/permissions-and-sandboxes.html#!api-specification/markdown/narrative/technical_overview/sandboxes/sandboxes-overview.md) for more information.",
								"type": "string",
								"enabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://platform.adobe.io/data/foundation/schemaregistry/:CONTAINER_ID/descriptors",
							"protocol": "https",
							"host": [
								"platform",
								"adobe",
								"io"
							],
							"path": [
								"data",
								"foundation",
								"schemaregistry",
								":CONTAINER_ID",
								"descriptors"
							],
							"variable": [
								{
									"value": "{{CONTAINER_ID}}",
									"id": "CONTAINER_ID"
								}
							]
						},
						"description": "<p>Schemas define a static view of data entities, but do not provide specific details on how data based on these schemas (datasets, etc) may relate to one another. Adobe Experience Platform allows you to describe these relationships and other interpretive metadata about a schema using descriptors.</p><br/><p>Schema descriptors are tenant-level metadata, meaning they are unique to your IMS Organization and all descriptor operations take place in the tenant container.</p><br/><p>Each schema can have one or more schema descriptor entities applied to it. Each schema descriptor entity includes a descriptor '@type' and the 'sourceSchema' to which it applies. Once applied, these descriptors will apply to all datasets created using the schema.</p><br/><p>The Schema Registry supports the use of query parameters when listing descriptors. The most common query parameters include:</br><ul><li>property - Return only results that match the given property. e.g. property=@type==xdm:descriptorIdentity returns only descriptors with a '@type' of 'xdm:descriptorIdentity'.</li><li>limit - Limit the number of resources returned. e.g. limit=5 will return only five resources in the list.</li><li>You may also use an ampersand (&) to combine query parameters.</li></ul></p><p>Accept headers for descriptors include:<br/><ul><li><strong>application/vnd.adobe.xdm-id+json</strong> | Returns an array of descriptor IDs</li><li><strong>application/vnd.adobe.xdm-link+json</strong> | Returns an array of descriptor API paths</li><li><strong>application/vnd.adobe.xdm-full+json</strong> | Returns an array of expanded descriptor objects</li></ul></p><br/><p>"
					},
					"response": []
				},
				{
					"name": "Create a new descriptor. Required fields in payload vary based on @type.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Begin Adobe-provided Pre-Request Scripts **/",
									"// Do not send HTTP Headers with empty variables, as Postman will send the literal variable name",
									"pm.request.headers.each(header => {",
									"    if (header.value.startsWith(\"{{\") && header.value.endsWith(\"}}\")) {",
									"        if (!pm.variables.get(header.value.substring(2, header.value.length - 2))) { pm.request.headers.remove(header.key); }",
									"    }",
									"});",
									"",
									"// Do not send HTTP URL Query Parameters with empty variables, as Postman will send the literal variable name",
									"pm.request.url.query.remove(q => { ",
									"    if (q.value.startsWith(\"{{\") && q.value.endsWith(\"}}\")) {",
									"        return !pm.variables.get(q.value.substring(2, q.value.length - 2));",
									"    } ",
									"});",
									"/** End Adobe-provided Pre-Request Scripts **/"
								]
							}
						}
					],
					"_postman_id": "1896b935-9cda-4941-8591-17a56f61681a",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.adobe.xed+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"description": "The access token provided after authorization in the format \"Bearer {ACCESS_TOKEN}\"",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"description": "Your specific API key for your unique Platform configuration ({API_KEY})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-gw-ims-org-id",
								"value": "{{IMS_ORG}}",
								"description": "Unique Identifier for your IMS Organization ({IMS_ORG})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-sandbox-name",
								"value": "{{SANDBOX_NAME}}",
								"description": "The name of the sandbox in which the operation will take place. See the [sandboxes overview documentation](https://www.adobe.io/apis/experienceplatform/home/permissions-and-sandboxes/permissions-and-sandboxes.html#!api-specification/markdown/narrative/technical_overview/sandboxes/sandboxes-overview.md) for more information.",
								"type": "string",
								"enabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{descriptorPayload}}"
						},
						"url": {
							"raw": "https://platform.adobe.io/data/foundation/schemaregistry/:CONTAINER_ID/descriptors",
							"protocol": "https",
							"host": [
								"platform",
								"adobe",
								"io"
							],
							"path": [
								"data",
								"foundation",
								"schemaregistry",
								":CONTAINER_ID",
								"descriptors"
							],
							"variable": [
								{
									"value": "{{CONTAINER_ID}}",
									"id": "CONTAINER_ID"
								}
							]
						},
						"description": "<p>Required fields for defining a descriptor vary based on the @type of the descriptor.</p>"
					},
					"response": []
				},
				{
					"name": "Lookup specific descriptor by its @id.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Begin Adobe-provided Pre-Request Scripts **/",
									"// Do not send HTTP Headers with empty variables, as Postman will send the literal variable name",
									"pm.request.headers.each(header => {",
									"    if (header.value.startsWith(\"{{\") && header.value.endsWith(\"}}\")) {",
									"        if (!pm.variables.get(header.value.substring(2, header.value.length - 2))) { pm.request.headers.remove(header.key); }",
									"    }",
									"});",
									"",
									"// Do not send HTTP URL Query Parameters with empty variables, as Postman will send the literal variable name",
									"pm.request.url.query.remove(q => { ",
									"    if (q.value.startsWith(\"{{\") && q.value.endsWith(\"}}\")) {",
									"        return !pm.variables.get(q.value.substring(2, q.value.length - 2));",
									"    } ",
									"});",
									"/** End Adobe-provided Pre-Request Scripts **/"
								]
							}
						}
					],
					"_postman_id": "7b55e5e9-c8b0-46e3-8fae-3f428434fece",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.adobe.xed+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"description": "The access token provided after authorization in the format \"Bearer {ACCESS_TOKEN}\"",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"description": "Your specific API key for your unique Platform configuration ({API_KEY})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-gw-ims-org-id",
								"value": "{{IMS_ORG}}",
								"description": "Unique Identifier for your IMS Organization ({IMS_ORG})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-sandbox-name",
								"value": "{{SANDBOX_NAME}}",
								"description": "The name of the sandbox in which the operation will take place. See the [sandboxes overview documentation](https://www.adobe.io/apis/experienceplatform/home/permissions-and-sandboxes/permissions-and-sandboxes.html#!api-specification/markdown/narrative/technical_overview/sandboxes/sandboxes-overview.md) for more information.",
								"type": "string",
								"enabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://platform.adobe.io/data/foundation/schemaregistry/:CONTAINER_ID/descriptors/:@id",
							"protocol": "https",
							"host": [
								"platform",
								"adobe",
								"io"
							],
							"path": [
								"data",
								"foundation",
								"schemaregistry",
								":CONTAINER_ID",
								"descriptors",
								":@id"
							],
							"variable": [
								{
									"value": "{{CONTAINER_ID}}",
									"id": "CONTAINER_ID"
								},
								{
									"value": "{{@id}}",
									"id": "@id"
								}
							]
						},
						"description": "<p>View the details of a specific descriptor by performing a lookup (GET) request using the @id of the descriptor. Descriptors are not versioned, therefore no Accept header is required in the lookup request.</p>"
					},
					"response": []
				},
				{
					"name": "Update a descriptor. Required fields in payload vary based on @type.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Begin Adobe-provided Pre-Request Scripts **/",
									"// Do not send HTTP Headers with empty variables, as Postman will send the literal variable name",
									"pm.request.headers.each(header => {",
									"    if (header.value.startsWith(\"{{\") && header.value.endsWith(\"}}\")) {",
									"        if (!pm.variables.get(header.value.substring(2, header.value.length - 2))) { pm.request.headers.remove(header.key); }",
									"    }",
									"});",
									"",
									"// Do not send HTTP URL Query Parameters with empty variables, as Postman will send the literal variable name",
									"pm.request.url.query.remove(q => { ",
									"    if (q.value.startsWith(\"{{\") && q.value.endsWith(\"}}\")) {",
									"        return !pm.variables.get(q.value.substring(2, q.value.length - 2));",
									"    } ",
									"});",
									"/** End Adobe-provided Pre-Request Scripts **/"
								]
							}
						}
					],
					"_postman_id": "82e21d1c-b926-4b2b-996a-2244a0e50d2e",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.adobe.xed+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"description": "The access token provided after authorization in the format \"Bearer {ACCESS_TOKEN}\"",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"description": "Your specific API key for your unique Platform configuration ({API_KEY})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-gw-ims-org-id",
								"value": "{{IMS_ORG}}",
								"description": "Unique Identifier for your IMS Organization ({IMS_ORG})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-sandbox-name",
								"value": "{{SANDBOX_NAME}}",
								"description": "The name of the sandbox in which the operation will take place. See the [sandboxes overview documentation](https://www.adobe.io/apis/experienceplatform/home/permissions-and-sandboxes/permissions-and-sandboxes.html#!api-specification/markdown/narrative/technical_overview/sandboxes/sandboxes-overview.md) for more information.",
								"type": "string",
								"enabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{descriptorPayload}}"
						},
						"url": {
							"raw": "https://platform.adobe.io/data/foundation/schemaregistry/:CONTAINER_ID/descriptors/:@id",
							"protocol": "https",
							"host": [
								"platform",
								"adobe",
								"io"
							],
							"path": [
								"data",
								"foundation",
								"schemaregistry",
								":CONTAINER_ID",
								"descriptors",
								":@id"
							],
							"variable": [
								{
									"value": "{{CONTAINER_ID}}",
									"id": "CONTAINER_ID"
								},
								{
									"value": "{{@id}}",
									"id": "@id"
								}
							]
						},
						"description": "<p>Update a desriptor by issuing a PUT request to the @id of the descriptor being updated.<br/><br/>This action is <em>re-writing</em> the existing descriptor, therefore the payload must include all descriptor fields that were required when the descriptor was defined.</p>"
					},
					"response": []
				},
				{
					"name": "Remove a descriptor using its @id.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Begin Adobe-provided Pre-Request Scripts **/",
									"// Do not send HTTP Headers with empty variables, as Postman will send the literal variable name",
									"pm.request.headers.each(header => {",
									"    if (header.value.startsWith(\"{{\") && header.value.endsWith(\"}}\")) {",
									"        if (!pm.variables.get(header.value.substring(2, header.value.length - 2))) { pm.request.headers.remove(header.key); }",
									"    }",
									"});",
									"",
									"// Do not send HTTP URL Query Parameters with empty variables, as Postman will send the literal variable name",
									"pm.request.url.query.remove(q => { ",
									"    if (q.value.startsWith(\"{{\") && q.value.endsWith(\"}}\")) {",
									"        return !pm.variables.get(q.value.substring(2, q.value.length - 2));",
									"    } ",
									"});",
									"/** End Adobe-provided Pre-Request Scripts **/"
								]
							}
						}
					],
					"_postman_id": "05eb3517-b905-483d-9f39-a83daba00c89",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.adobe.xed+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"description": "The access token provided after authorization in the format \"Bearer {ACCESS_TOKEN}\"",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"description": "Your specific API key for your unique Platform configuration ({API_KEY})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-gw-ims-org-id",
								"value": "{{IMS_ORG}}",
								"description": "Unique Identifier for your IMS Organization ({IMS_ORG})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-sandbox-name",
								"value": "{{SANDBOX_NAME}}",
								"description": "The name of the sandbox in which the operation will take place. See the [sandboxes overview documentation](https://www.adobe.io/apis/experienceplatform/home/permissions-and-sandboxes/permissions-and-sandboxes.html#!api-specification/markdown/narrative/technical_overview/sandboxes/sandboxes-overview.md) for more information.",
								"type": "string",
								"enabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://platform.adobe.io/data/foundation/schemaregistry/:CONTAINER_ID/descriptors/:@id",
							"protocol": "https",
							"host": [
								"platform",
								"adobe",
								"io"
							],
							"path": [
								"data",
								"foundation",
								"schemaregistry",
								":CONTAINER_ID",
								"descriptors",
								":@id"
							],
							"variable": [
								{
									"value": "{{CONTAINER_ID}}",
									"id": "CONTAINER_ID"
								},
								{
									"value": "{{@id}}",
									"id": "@id"
								}
							]
						},
						"description": "<p>Remove a descriptor from the registry by issuing a DELETE request to the @id of the descriptor being removed.</p>"
					},
					"response": []
				}
			],
			"_postman_id": "bc7c8a97-6c13-4016-a126-c9c0826c8cd6",
			"description": "Schema descriptors are tenant-level metadata used to provide interpretive details on how data based on certain schemas may relate or interact with one another."
		},
		{
			"name": "Unions",
			"item": [
				{
					"name": "Retrieve a list of union views.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Begin Adobe-provided Pre-Request Scripts **/",
									"// Do not send HTTP Headers with empty variables, as Postman will send the literal variable name",
									"pm.request.headers.each(header => {",
									"    if (header.value.startsWith(\"{{\") && header.value.endsWith(\"}}\")) {",
									"        if (!pm.variables.get(header.value.substring(2, header.value.length - 2))) { pm.request.headers.remove(header.key); }",
									"    }",
									"});",
									"",
									"// Do not send HTTP URL Query Parameters with empty variables, as Postman will send the literal variable name",
									"pm.request.url.query.remove(q => { ",
									"    if (q.value.startsWith(\"{{\") && q.value.endsWith(\"}}\")) {",
									"        return !pm.variables.get(q.value.substring(2, q.value.length - 2));",
									"    } ",
									"});",
									"/** End Adobe-provided Pre-Request Scripts **/"
								]
							}
						}
					],
					"_postman_id": "552b926a-7c76-40cc-81b9-db773d1391e6",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.adobe.xed+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"description": "The access token provided after authorization in the format \"Bearer {ACCESS_TOKEN}\"",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"description": "Your specific API key for your unique Platform configuration ({API_KEY})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-gw-ims-org-id",
								"value": "{{IMS_ORG}}",
								"description": "Unique Identifier for your IMS Organization ({IMS_ORG})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-sandbox-name",
								"value": "{{SANDBOX_NAME}}",
								"description": "The name of the sandbox in which the operation will take place. See the [sandboxes overview documentation](https://www.adobe.io/apis/experienceplatform/home/permissions-and-sandboxes/permissions-and-sandboxes.html#!api-specification/markdown/narrative/technical_overview/sandboxes/sandboxes-overview.md) for more information.",
								"type": "string",
								"enabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://platform.adobe.io/data/foundation/schemaregistry/tenant/unions?properties={{properties}}&orderby={{orderby}}&start={{start}}&limit={{limit}}",
							"protocol": "https",
							"host": [
								"platform",
								"adobe",
								"io"
							],
							"path": [
								"data",
								"foundation",
								"schemaregistry",
								"tenant",
								"unions"
							],
							"query": [
								{
									"key": "properties",
									"value": "{{properties}}"
								},
								{
									"key": "orderby",
									"value": "{{orderby}}"
								},
								{
									"key": "start",
									"value": "{{start}}"
								},
								{
									"key": "limit",
									"value": "{{limit}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Lookup a union view by ID.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Begin Adobe-provided Pre-Request Scripts **/",
									"// Do not send HTTP Headers with empty variables, as Postman will send the literal variable name",
									"pm.request.headers.each(header => {",
									"    if (header.value.startsWith(\"{{\") && header.value.endsWith(\"}}\")) {",
									"        if (!pm.variables.get(header.value.substring(2, header.value.length - 2))) { pm.request.headers.remove(header.key); }",
									"    }",
									"});",
									"",
									"// Do not send HTTP URL Query Parameters with empty variables, as Postman will send the literal variable name",
									"pm.request.url.query.remove(q => { ",
									"    if (q.value.startsWith(\"{{\") && q.value.endsWith(\"}}\")) {",
									"        return !pm.variables.get(q.value.substring(2, q.value.length - 2));",
									"    } ",
									"});",
									"/** End Adobe-provided Pre-Request Scripts **/"
								]
							}
						}
					],
					"_postman_id": "d982fac1-9380-4537-a93a-955eb54ed93d",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.adobe.xed+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"description": "The access token provided after authorization in the format \"Bearer {ACCESS_TOKEN}\"",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"description": "Your specific API key for your unique Platform configuration ({API_KEY})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-gw-ims-org-id",
								"value": "{{IMS_ORG}}",
								"description": "Unique Identifier for your IMS Organization ({IMS_ORG})",
								"type": "string",
								"enabled": true
							},
							{
								"key": "x-sandbox-name",
								"value": "{{SANDBOX_NAME}}",
								"description": "The name of the sandbox in which the operation will take place. See the [sandboxes overview documentation](https://www.adobe.io/apis/experienceplatform/home/permissions-and-sandboxes/permissions-and-sandboxes.html#!api-specification/markdown/narrative/technical_overview/sandboxes/sandboxes-overview.md) for more information.",
								"type": "string",
								"enabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://platform.adobe.io/data/foundation/schemaregistry/tenant/unions/:$id",
							"protocol": "https",
							"host": [
								"platform",
								"adobe",
								"io"
							],
							"path": [
								"data",
								"foundation",
								"schemaregistry",
								"tenant",
								"unions",
								":$id"
							],
							"variable": [
								{
									"value": "{{$id}}",
									"id": "$id"
								}
							]
						}
					},
					"response": []
				}
			],
			"_postman_id": "f902b7ee-6fed-4097-bdd3-55e02fceff8e",
			"description": "Union views aggregate the fields of all schemas that implement the same class (such as ExperienceEvent or Profile) into a single schema. They are used by Real-time Customer Profile to merge data together to form a \"single source of truth\" for an individual."
		}
	]
}