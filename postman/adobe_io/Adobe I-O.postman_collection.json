{
  "info": {
    "_postman_id": "ef205aeb-6d86-4c0f-8245-253c1acb2d98",
    "name": "Adobe I/O",
    "description": "Example calls to use JWT integration and authentication in Adobe I/O\n\nThis is part of the corresponding article written for the Adobe I/O blog.\n\nContact: ktukker@adobe.com",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "INIT: Load Crypto Library for RS256",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "824e628b-b420-417b-894b-417ab6412896",
            "type": "text/javascript",
            "exec": [
              "postman.setGlobalVariable(\"jsrsasign-js\", responseBody);"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": ""
        },
        "url": {
          "raw": "http://kjur.github.io/jsrsasign/jsrsasign-latest-all-min.js",
          "protocol": "http",
          "host": ["kjur", "github", "io"],
          "path": ["jsrsasign", "jsrsasign-latest-all-min.js"]
        },
        "description": "Load the RSA-Sign Crypto LIbrary in a global environment variable\n\nSource: http://kjur.github.io/jsrsasign/jsrsasign-latest-all-min.js\n\nGithub: https://github.com/kjur/jsrsasign"
      },
      "response": []
    },
    {
      "name": "IMS: JWT Generate + Auth",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "1759a9d4-ac9a-4eb2-b5d1-a608a43a2cad",
            "type": "text/javascript",
            "exec": [
              "var data = JSON.parse(responseBody);",
              "postman.setEnvironmentVariable(\"ACCESS_TOKEN\", data.ACCESS_TOKEN);"
            ]
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "id": "f067b81f-65d2-4672-ae41-0ff1338d25f6",
            "type": "text/javascript",
            "exec": [
              "// Tips from: https://github.com/kjur/jsrsasign/issues/199",
              "// https://github.com/kjur/jsrsasign/wiki/Tutorial-for-JWT-generation",
              "",
              "var navigator = {}; //fake a navigator object for the lib",
              "var window = {}; //fake a window object for the lib",
              "eval(postman.getGlobalVariable(\"jsrsasign-js\")); //import javascript jsrsasign",
              "",
              "",
              "var header = {",
              "\t\"alg\": \"RS256\"",
              "};",
              "",
              "var data = {",
              "\t\"exp\": Math.round(87000 + Date.now()/1000),",
              "\t\"iss\": postman.getEnvironmentVariable(\"IMSOrg\"),",
              "\t\"sub\": postman.getEnvironmentVariable(\"techacct\"),",
              "\t\"aud\": postman.getEnvironmentVariable(\"IMS\")+\"/c/\"+postman.getEnvironmentVariable(\"API_KEY\")",
              "};",
              "",
              "meta_scopes = postman.getEnvironmentVariable(\"meta_scope\").split(',');",
              "meta_scopes.forEach(function(scope){",
              "    var meta_scope = postman.getEnvironmentVariable(\"IMS\")+\"/s/\"+",
              "                     scope;",
              "    data[meta_scope] = true;",
              "});",
              "",
              "var secret = postman.getEnvironmentVariable(\"secret\");",
              "",
              "var sHeader = JSON.stringify(header);",
              "var sPayload = JSON.stringify(data);",
              "var sJWT = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, secret);",
              "",
              "console.log(sPayload);",
              "console.log(sJWT);",
              "",
              "postman.setEnvironmentVariable(\"jwt_token\", sJWT);"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "formdata",
          "formdata": [
            {
              "key": "client_id",
              "value": "{{API_KEY}}",
              "type": "text"
            },
            {
              "key": "client_secret",
              "value": "{{clientSecret}}",
              "type": "text"
            },
            {
              "key": "jwt_token",
              "value": "{{jwt_token}}",
              "type": "text"
            }
          ]
        },
        "url": {
          "raw": "{{IMS}}/ims/exchange/jwt/",
          "host": ["{{IMS}}"],
          "path": ["ims", "exchange", "jwt", ""]
        },
        "description": "Generate a JWT token using the Crypto RS256\nSend to IMS for ACCESS_TOKEN"
      },
      "response": []
    }
  ]
}
